[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "video-understanding-ai"
version = "0.1.0"
authors = [
  { name="Your Organization", email="your.email@example.com" },
]
description = "AI-powered video understanding and analysis system"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--cov=src",
    "--cov-branch",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-report=term-missing:skip-covered",
    "--strict-markers",
]
markers = [
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "slow: marks tests as slow running",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "**/__init__.py",
    "**/conftest.py",
    "src/core/config.py",
    "src/storage/cache.py",
    "src/storage/vector.py",
    "src/video/upload.py"
]
relative_files = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "pass",
    "raise NotImplemented",
    "@abstractmethod",
]
fail_under = 50
precision = 2
skip_empty = true
sort = "cover"

[tool.coverage.html]
directory = "coverage_html"
show_contexts = true
title = "Video Understanding AI Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.ruff]
line-length = 88
target-version = "py310"
exclude = [
    "docs/*",
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg",
]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "RUF",  # Ruff-specific rules
    "D",    # pydocstyle
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PL",   # Pylint
    "TRY",  # tryceratops
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D107",  # Missing docstring in __init__
    "E501",  # Line too long (handled by black)
]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.per-file-ignores]
"tests/**/*" = [
    "D",    # Ignore docstring requirements in tests
    "S",    # Ignore security warnings in tests
    "PLR",  # Ignore pylint refactor suggestions in tests
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["src"]
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pylint]
max-args = 8
max-statements = 50

[tool.ruff.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true
