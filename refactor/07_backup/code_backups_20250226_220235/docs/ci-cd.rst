CI/CD Pipeline Documentation






Overview


--------





--------





--------





--------





--------




Our CI/CD pipeline automates testing, linting, security checks, and deployment processes. It ensures code quality, maintains security standards, and provides automated releases to PyPI.

Pipeline Structure


------------------





------------------





------------------





------------------





------------------




The pipeline follows this structure:

.. code-block:: text

      Push/PR
      ├── Test ──────┐
      ├── Lint ──────┼── Build ── Deploy to PyPI
      └── Security ──┘

      Required Secrets




The pipeline requires the following repository secrets:

.. code-block:: yaml

      OPENAI_API_KEY: OpenAI API key for GPT-4V
      GEMINI_API_KEY: Google Gemini Pro Vision API key
      TWELVE_LABS_API_KEY: Twelve Labs API key
      PYPI_USERNAME: PyPI username
      PYPI_PASSWORD: PyPI password

      Pipeline Jobs


























Test Job
























Runs the test suite across multiple Python versions:

.. code-block:: yaml

      strategy:
      matrix:
         python-version: [3.9, "3.10", "3.11"]

      Steps:

1. Set up Python environment
2. Install FFmpeg dependencies
3. Install project dependencies
4. Configure test environment

5. Run tests:

   - Unit tests
   - Integration tests
   - Performance tests

6. Upload coverage reports
7. Archive test results

Requirements:

- Minimum 85% code coverage
- All tests must pass
- Coverage reports uploaded to Codecov






















Lint Job
























Code quality checks using multiple tools:

.. code-block:: bash

      Format checking





















































      black --check src tests

      Style checking





















































      flake8 src tests

      Modern Python linter





















































      ruff check src tests

      Type checking





















































      mypy src

      Security Job


------------------





------------------





------------------





------------------





------------------








------------------










Security scanning and dependency checks:

.. code-block:: bash

      Security scanning





















































      bandit -r src

      Dependency security check





















































      safety check

      Dependency review





















































      actions/dependency-review-action

      Build Job


---------------





---------------





---------------





---------------





---------------








---------------










Package building and verification:

.. code-block:: bash

      Build package





















































      python -m build

      Verify package





















































      twine check dist/*

      Deploy Job


----------------





----------------





----------------





----------------





----------------








----------------










Automated PyPI deployment when merging to main:

.. code-block:: yaml

      deploy:
      needs: [test, lint, security, build]
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'

      Workflow Configuration

























Triggers
























The pipeline runs on:

- Push to ``main`` or ``develop`` branches
- Pull requests to ``main`` or ``develop`` branches






















Python Setup
























.. code-block:: yaml

      python-version: [3.9, "3.10", "3.11"]

      Coverage Requirements




.. code-block:: yaml

      coverage report --fail-under=85

      Artifact Management




.. code-block:: yaml

      retention-days: 14

      Best Practices

























Branch Protection
























- Require status checks to pass
- Require code review
- Protect the main branch






















Secrets Management
























- Use repository secrets
- Rotate keys regularly
- Limit secret access






















Test Strategy
























- Run fast tests first
- Skip slow tests in PR checks
- Maintain high coverage






















Dependency Management
























- Regular dependency updates
- Security scanning
- Version pinning

Troubleshooting




Test Issues




.. code-block:: bash

      Rerun failed tests





















































      pytest --lf

      Debug test environment





















































      pytest -vv --tb=long

      Check coverage locally





















































      pytest --cov=src

      Lint Issues




.. code-block:: bash

      Auto-format code





















































      black src tests

      Fix common issues





















































      ruff --fix src tests

      Show detailed lint errors





















































      flake8 src tests --show-source

      Build Issues




.. code-block:: bash

      Clean build artifacts





















































      rm -rf dist/ build/ *.egg-info

      Rebuild package





















































      python -m build

      Verify package





















































      twine check dist/*

      Development Setup




Environment Setup




.. code-block:: bash

      Create virtual environment





















































      python -m venv venv

      source venv/bin/activate  or `venv\Scripts\activate` on Windows





















































      Install dependencies





















































      pip install -r requirements.txt
      pip install -r requirements-test.txt

      Install pre-commit hooks





















































      pre-commit install

      Local Checks




.. code-block:: bash

      Run all checks





















































      ./scripts/run_checks.sh

      Run specific checks





















































      pytest tests/unit/
      black --check src
      bandit -r src

      Deployment Guide




Automated Process




- Merge to main branch
- Tests, lint, and security checks run
- Package built and verified
- Deployed to PyPI if all checks pass

Manual Process




.. code-block:: bash

      Build





















































      python -m build

      Upload to TestPyPI





















































      twine upload --repository testpypi dist/*

Indices and Tables












\* :doc:`/modindex`*
