name: CI

# Note: Old code in src/video_understanding and video_understanding directories
# is excluded from linting and coverage checks as it's out of scope for the POC
# and scheduled for removal after the refactoring is complete.

# Required repository secrets:
# - OPENAI_API_KEY: OpenAI API key for GPT-4V
# - GEMINI_API_KEY: Google Gemini Pro Vision API key
# - TWELVE_LABS_API_KEY: Twelve Labs API key for video processing
# - PYPI_USERNAME: PyPI username for package deployment
# - PYPI_PASSWORD: PyPI password for package deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Testing configuration changes'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Set up test environment
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        TWELVE_LABS_API_KEY: ${{ secrets.TWELVE_LABS_API_KEY }}
      run: |
        cp .env.example .env.test
        sed -i "s/OPENAI_API_KEY=.*/OPENAI_API_KEY=$OPENAI_API_KEY/" .env.test
        sed -i "s/GEMINI_API_KEY=.*/GEMINI_API_KEY=$GEMINI_API_KEY/" .env.test
        sed -i "s/TWELVE_LABS_API_KEY=.*/TWELVE_LABS_API_KEY=$TWELVE_LABS_API_KEY/" .env.test

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=src --cov-append

    - name: Run performance tests (subset)
      run: |
        pytest tests/performance/ -v -m "not slow" --cov=src --cov-append

    - name: Upload coverage report
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

    - name: Check test coverage
      run: |
        coverage report --fail-under=85

    - name: Archive test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          .coverage
          coverage.xml
          test-results/
        retention-days: 14

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 ruff mypy

    - name: Run black
      run: |
        black --check src tests --exclude "src/video_understanding/|video_understanding/"

    - name: Run flake8
      run: |
        flake8 src tests

    - name: Run ruff
      run: |
        ruff check src tests

    - name: Run mypy
      run: |
        mypy src tests

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security checks
      run: |
        bandit -r src --exclude "src/video_understanding/**"
        safety check

    - name: Run dependency review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: critical

  build:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 14

  deploy:
    needs: [test, lint, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      if: success()
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        TWINE_REPOSITORY: pypi
      run: twine upload dist/*
